Game of Stones protocol description
===================================

The engine communicates with the bots using the standard in and out. The engine sends requests to the bot via standard in and reads back the response via standard out. The requests and responses are in JSON format.

Data types
==========

PlayerColor: integer(None = 0, White = 1, Black = -1)

StoneType: integer (None = 0, A = 1, B = 2, C = 3)

StoneHeight: integer (positive)

MoveType: integer(Pass = 0, Attack = 1, Strengthen = 2)

Board
-----

The game board needs some additional explanation. First of all the JSON object of the current board state is as follows.

    {
        "state": <9x9 array of ints>
    }

The state is a "compressed" representation of the game board. The game board is stored as a 9 by 9 matrix of integers. The row-column combination corresponds to labels used in the viewer as follows:

       A B C D E F G H I
     -------------------
    1| X X X X X . . . .
    2| X X X X X X . . .
    3| X X X X X X X . .
    4| X X X X X X X X .
    5| X X X X . X X X X
    6| . X X X X X X X X
    7| . . X X X X X X X
    8| . . . X X X X X X
    9| . . . . X X X X X

    (where X is a valid board location and . is not)

For each board location three values are available, namely
* the owner (i.e. player color),
* the type of stone,
* the height of the stone.

These values are encoded in a single integer value according to the following formula.

    owner * (height * 4 + stone)

For example:
* 0: owned by no player
* 5: owned by white, type A of height 1
* -11: owned by black, type C of height 2

Board location
--------------

Spaces on the board can be indexed using board locations. A board location has the following structure.

    {
        "X": <0..8>,
        "Y": <0..8>
    }

All board locations transferred between the engine and the bots and vice versa are valid board locations (i.e. only the X's in the image above). The engine will never send an invalid location. When the bot responds with an invalid location, its response will not be processed.

Initialization
--------------

The engine sends an initiate request to both bots containing the color of the particular bot. The initiate request has the following structure.

    {
        "Color": <PlayerColor>
    }

The bot is not supposed to respond to this.


Doing a move
------------

The engine sends the bot that needs to make a move a move request. Each move request contains the current state of the game board and the list of move types that are allowed. The move request has the following structure.

    {
        "Board": <Board>,
        "AllowedMoves": <MoveType[]>
    }

The bot is supposed to respond to this with a move. A move response has the following structure.

    {
        "Type": <MoveType>,
        "From": <BoardLocation>
        "To": <BoardLocation>
    }

The move response is checked by the engine before it is processed. If it is regarded as invalid, then the move will not be processed and the corresponding bot will loose the match.
A move is valid when:
- Its type was in the "AllowedMoves" list transmitted in the move request message.
- It is a "Pass" and
    - both From and To fields are "null".
- It is an "Attack" and
    - the From location is owned by the current bot,
    - the To location is owned by its opponent,
    - the line between the To and From locations is a valid straight line (N, S, E, W, SE, NW),
    - all spaces between the To and From locations are empty,
    - the height of the "from stone" is greater or equal to the height of the "to stone".
- It is a "Strenghten" and
    - the From and To locations are both owned by the current bot,
    - the line between the To and From locations is a valid straight line (N, S, E, W, SE, NW),
    - all spaces between the To and From locations are empty.

When the move is valid the engine will update the board state accordingly and send information about the processed move to both bots. A processed move message has the following structure.

    {
        "Player": <PlayerColor>, // player that performed the move
        "Move": <Move>, // the actual move (type, from and to)
        "Winner": <PlayerColor> // the winner of the match after this move was processed. 0 (None) when no winner yet.
    }

A bot is not supposed to respond to a processed move message.

Example
-------

* The engine sends an "attack only" move request to black:

    {
        "Board": {
            "state": [
                [  0, -5, 19,  0,  5,  0,  0,  0,  0],
                [-10, -6,  0,  0,  6,  0,  0,  0,  0],
                [ -5,  0,  0, -7,  0,  5, -5,  0,  0],
                [  0, -6,  7, -5,  0,  0, -6, -5,  0],
                [  5,  0,  0,  0,  0,  0,  0, -5,  0],
                [  0,  0, -6,  5,  5,  5,  0,  0,  0],
                [  0,  0,  0,  0,  0, -6,  7,  6,  9],
                [  0,  0,  0,  0,  0, -6,  0,  6,  5],
                [  0,  0,  0,  0,  0,-13,  0,  0,  5]
            ]
        },
        "AllowedMoves": [1]
    }

* Black responds with the following attack from 1,1 to 4,1

    {
        "Type": 1,
        "From": {"X":1, "Y":1},
        "To": {"X":4, "Y":1}
    }

* The engine then responds with the following processed move.
    
    {
        "Player": -1,
        "Move": {
            "Type": 1,
            "From": {"X":1, "Y":1},
            "To": {"X":4, "Y":1}
        },
        "Winner": 0
    }

* No winner, yet.


Match order
===========

Once the bots are initialized, the engine will send an "attack only" move request to the white colored bot. This is the first move of the match. Then the black bot will get two move requests, one "attack only" followed by one with all types allowed. Then the white bot gets to move requests.

After each move request both bots will receive the processed moves.

The engine will stop immediately after a move when it resulted in a winner.
